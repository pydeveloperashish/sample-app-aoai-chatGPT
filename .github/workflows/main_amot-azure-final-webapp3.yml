# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - amot-azure-final-webapp3

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt

      # --- Build the frontend (Vite) and copy output to static/ ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies and build
        run: |
          cd frontend
          npm install
          npm run build

      - name: List all files after build
        run: |
          echo "Listing all files from root after build:"
          find .

      - name: List frontend build output
        run: ls -l static || echo "No static directory found"

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Clean up symlinks and temporary files
        run: |
          # Find and remove symlinks
          find . -type l -delete
          # Remove node_modules if exists (common source of symlinks)
          rm -rf node_modules
          # Remove any .git directories which can contain symlinks
          find . -name ".git" -type d -exec rm -rf {} +
          # Remove __pycache__ directories
          find . -name "__pycache__" -type d -exec rm -rf {} +
          # Remove .pyc files
          find . -name "*.pyc" -delete
          # Remove .env file to ensure we don't include sensitive data
          rm -f .env

      - name: Ensure PDF directory exists
        run: |
          # Create site_pdfs directory if it doesn't exist
          mkdir -p site_pdfs
          echo "Contents of site_pdfs directory:"
          ls -la site_pdfs/

      - name: Create startup script
        run: |
          cat > startup.sh << 'EOF'
          #!/bin/bash
          echo "Starting application..."
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Print environment variables (without secrets)
          echo "=== Environment Variables ==="
          env | grep -v KEY | grep -v SECRET | grep -v PASSWORD | sort
          
          # Create a minimal .env file with just DOTENV_PATH
          echo "DOTENV_PATH=non_existent_file.env" > .env
          
          # List all Python modules in the current directory
          echo "=== Available Python modules ==="
          python -c "import pkgutil; print('\n'.join([p[1] for p in pkgutil.iter_modules()]))"
          
          # Check app.py content
          echo "=== App.py main objects ==="
          grep -E "^app|^bp" app.py
          
          # Start the application with the correct WSGI app
          echo "Starting Gunicorn with app:create_app()..."
          exec gunicorn --bind=0.0.0.0 --timeout 600 --log-level debug "app:create_app()"
          EOF
          chmod +x startup.sh

      - name: Zip artifact for deployment
        run: |
          # Create more reliable exclusions pattern for zip
          find . -type d -name "venv" -o -name "node_modules" -o -name ".git" -o -name ".github" -o -name ".pytest_cache" -o -name "__pycache__" -prune -o -type f -name "*.py" -o -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.md" -o -name "*.txt" -o -name "*.ini" -o -name "*.yml" -o -name "*.yaml" -o -name "*.cfg" -o -name "*.pdf" -o -path "./static/*" -o -path "./templates/*" -o -path "./site_pdfs/*" -o -name "startup.sh" | zip -@ release.zip

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_D47592F3B00C48F29EE9F38E3AD56709 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D92F010B6FD94F53BF553B2EF19BA418 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_96158896448E490A93CE646BE365144E }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'amot-azure-final-webapp3'
          slot-name: 'Production'
          startup-command: './startup.sh'
          app-settings: |
            # Deployment settings
            WEBSITE_RUN_FROM_PACKAGE=1
            SCM_DO_BUILD_DURING_DEPLOYMENT=true
            
            # Identity settings
            IDENTITY_ENDPOINT=${{ secrets.IDENTITY_ENDPOINT }}
            IDENTITY_HEADER=${{ secrets.IDENTITY_HEADER }}
            AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
            
            # Azure OpenAI settings
            AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_MODEL }}
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
            AZURE_OPENAI_KEY=${{ secrets.AZURE_OPENAI_KEY }}
            AZURE_OPENAI_SYSTEM_MESSAGE="You are an AI assistant that helps people find information."
            AZURE_OPENAI_PREVIEW_API_VERSION=2024-05-01-preview
            AZURE_OPENAI_TEMPERATURE=0
            AZURE_OPENAI_TOP_P=0
            AZURE_OPENAI_MAX_TOKENS=1000
            AZURE_OPENAI_STREAM=true
            
            # UI settings
            UI_TITLE="Azure OpenAI Chat"
            UI_CHAT_TITLE="Azure OpenAI Chat"
            UI_CHAT_DESCRIPTION="Ask me anything about your data"
            UI_SHOW_SHARE_BUTTON=true
            UI_SHOW_CHAT_HISTORY_BUTTON=true
            
            # Auth settings
            AUTH_ENABLED=false
            
            # Search settings
            SEARCH_ALLOW_PARTIAL_RESULT=false
            SEARCH_INCLUDE_CONTEXTS=citations,intent
            
            # Base settings
            DEBUG=true
            MS_DEFENDER_ENABLED=false
            
            # Avoid loading .env file
            DOTENV_PATH="non_existent_file.env"
          